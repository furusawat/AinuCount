'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,
format,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";var __name__="AinuLetter";export var dic=[["a","\u30a2","\u0430"],["i","\u30a4","\u0438"],["u","\u30a6","\u0443"],["e","\u30a8","\u044d"],["o","\u30aa","\u043e"],["k ","\u31f0","\u043a "],["ka","\u30ab","\u043a\u0430"],["ki","\u30ad","\u043a\u0438"],
["ku","\u30af","\u043a\u0443"],["ke","\u30b1","\u043a\u044d"],["ko","\u30b3","\u043a\u043e"],["s ","\u31f1","\u0441 "],["sa","\u30b5","\u0441\u0430"],["si","\u30b7","\u0441\u0438"],["su","\u30b9","\u0441\u0443"],["se","\u30bb","\u0441\u044d"],["so","\u30bd","\u0441\u043e"],["t ","\u30c3","\u0442 "],["ta","\u30bf","\u0442\u0430"],["tu","\u30c8\u30a5","\u0442\u0443"],["te","\u30c6","\u0442\u044d"],["to","\u30c8","\u0442\u043e"],["ca","\u30c1\u30e3","\u0447\u0430"],["ci","\u30c1","\u0447\u0438"],["cu",
"\u30c1\u30e5","\u0447\u0443"],["ce","\u30c1\u30a7","\u0447\u0435"],["co","\u30c1\u30e7","\u0447\u043e"],["n ","\u30f3","\u043d "],["na","\u30ca","\u043d\u0430"],["ni","\u30cb","\u043d\u0438"],["nu","\u30cc","\u043d\u0443"],["ne","\u30cd","\u043d\u044d"],["no","\u30ce","\u043d\u043e"],["ha","\u30cf","\u0445\u0430"],["hi","\u30d2","\u0445\u0438"],["hu","\u30d5","\u0445\u0443"],["he","\u30d8","\u0445\u044d"],["ho","\u30db","\u0445\u043e"],["p ","\u31f7\u309a","\u043f "],["pa","\u30d1","\u043f\u0430"],
["pi","\u30d4","\u043f\u0438"],["pu","\u30d7","\u043f\u0443"],["pe","\u30da","\u043f\u044d"],["po","\u30dd","\u043f\u043e"],["m ","\u31fa","\u043c "],["ma","\u30de","\u043c\u0430"],["mi","\u30df","\u043c\u0438"],["mu","\u30e0","\u043c\u0443"],["me","\u30e1","\u043c\u044d"],["mo","\u30e2","\u043c\u043e"],["y ","\u30a4","\u0439 "],["ya","\u30e4","\u044f"],["yu","\u30e6","\u044e"],["ye","\u30a4\u30a7","\u0435"],["yo","\u30e8","\u0451"],["r ","\u31fd","\u0440 "],["ra","\u30e9","\u0440\u0430"],["ri","\u30ea",
"\u0440\u0438"],["ru","\u30eb","\u0440\u0443"],["re","\u30ec","\u0440\u044d"],["ro","\u30ed","\u0440\u043e"],["w ","\u30a6","\u0432 "],["wa","\u30ef","\u0432\u0430"],["we","\u30a6\u30a7","\u0432\u044d"],["wo","\u30a6\u30a9","\u0432\u043e"]];export var soundchange=dict({"n s":"y s","n y":"y y","n w":"n m","r t":"t t","r c":"t c","r n":"n n","r r":"n r"});export var r_vowels=["\u31fb","\u31fc","\u31fd","\u31fe","\u31ff"];export var vowels=["a","i","u","e","o"];export var cons=["k","s","t","c","n","h",
"p","m","y","r","w"];export var dicMaker=function(src,tgt){var return_dic=dict({});var len_tmp=len(dic);for(var i=0;i<len_tmp;i++){if(len(dic[i][src])==1)return_dic[dic[i][src]]=dic[i][tgt].strip();if(len(dic[i][src])==2){if(!__in__(dic[i][src][0],return_dic))return_dic[dic[i][src][0]]=dict({});return_dic[dic[i][src][0]][dic[i][src][1]]=dic[i][tgt].strip()}}return return_dic};export var letterChange=function(words,src,tgt){if(src==tgt)return words;var result=[];if(src=="latin")if(tgt=="kana"||tgt==
"cyrillic"){if(tgt=="kana")var tmp_dic=dicMaker(0,1);else if(tgt=="cyrillic")var tmp_dic=dicMaker(0,2);var i=0;for(var [k,v]of soundchange.py_items())var words=words.py_replace(k,v);var len_tmp=len(words);while(i<len_tmp){if(__in__(words[i],vowels))result.append(tmp_dic[words[i]]);else if(__in__(words[i],cons))if(i+1==len_tmp||!__in__(words[i+1],vowels))if(tgt=="cyrillic")result.append(tmp_dic[words[i]][" "]);else if(words[i]=="r")if(i<=0||!__in__(words[i-1],vowels))result.append(r_vowels[2]);else result.append(r_vowels[vowels.index(words[i-
1])]);else if(i+1<len_tmp&&__in__(words.__getslice__(i,i+2,1),["pp","kk","ss"]))result.append(tmp_dic["t"][" "]);else if(i+1<len_tmp&&__in__(words.__getslice__(i,i+2,1),["mm","mp"]))result.append(tmp_dic["n"][" "]);else result.append(tmp_dic[words[i]][" "]);else{result.append(tmp_dic[words[i]][words[i+1]]);i++}else result.append(words[i]);i++}}return"".join(result)};

//# sourceMappingURL=AinuLetter.map